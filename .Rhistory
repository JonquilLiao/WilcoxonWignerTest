for (j in (i+1):124){
cor_mat[i, j] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
}
}
heatmap(cor_mat)
cor_mat = cor_mat + t(cor_mat)
wwtest(cor_mat)
heatmap(cor_mat)
where(COBRE.data$Y.cobre == -1)
which(COBRE.data$Y.cobre == -1)
pval_mat = matrix(0, nrow = 124, ncol = 124)
for (i in 1:123){
for (j in (i+1):124){
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = (COBRE.data$X.cobre[i, ]-mean(COBRE.data$X.cobre[i, ]))/sd(COBRE.data$X.cobre[i, ]) - (COBRE.data$X.cobre[j, ]-mean(COBRE.data$X.cobre[j, ]))/sd(COBRE.data$X.cobre[j, ])
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_p = wwtest(cur_mat)$p.value
pval_mat[i, j] = cur_p
}
}
#all the p values are around 0, so all the pairwise comparison are significant
pval_mat
i = 1
j = 2
cur_network = (COBRE.data$X.cobre[i, ]-mean(COBRE.data$X.cobre[i, ]))/sd(COBRE.data$X.cobre[i, ]) - (COBRE.data$X.cobre[j, ]-mean(COBRE.data$X.cobre[j, ]))/sd(COBRE.data$X.cobre[j, ])
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_p = wwtest(cur_mat)$p.value
wwtest(cur_mat)
heatmap(cur_network)
heatmap(cur_mat)
ind1 = which(COBRE.data$Y.cobre == 1)
ind2 = which(COBRE.data$Y.cobre == 2)
l1 = length(ind1)
mat_group1 = matrix(0, nrow = l1, ncol = l1)
for (i in ind1){
for (j in ind){
mat_group1[i, j] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
}
}
ind1 = which(COBRE.data$Y.cobre == 1)
ind2 = which(COBRE.data$Y.cobre == 2)
l1 = length(ind1)
mat_group1 = matrix(0, nrow = l1, ncol = l1)
for (i in ind1){
for (j in ind1){
mat_group1[i, j] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
}
}
ind1 = which(COBRE.data$Y.cobre == 1)
ind2 = which(COBRE.data$Y.cobre == 2)
l1 = length(ind1)
mat_group1 = matrix(0, nrow = l1, ncol = l1)
r = 1
c = 1
for (i in ind1){
for (j in ind1){
mat_group1[r, c] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
c = c + 1
}
r = r + 1
}
ind1 = which(COBRE.data$Y.cobre == 1)
ind2 = which(COBRE.data$Y.cobre == 2)
l1 = length(ind1)
mat_group1 = matrix(0, nrow = l1, ncol = l1)
r = 1
c = 1
for (i in ind1){
for (j in ind1){
mat_group1[r, c] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
c = c + 1
}
c = 1
r = r + 1
}
wwtest(mat_group1)
heatmap(mat_group1)
mat_group1
l2 = length(ind2)
mat_group2 = matrix(0, nrow = l2, ncol = l2)
r = 1
c = 1
for (i in ind2){
for (j in ind2){
mat_group1[r, c] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
c = c + 1
}
c = 1
r = r + 1
}
wwtest(mat_group2)
ind2 = which(COBRE.data$Y.cobre == -1)
COBRE.data$Y.cobre
ind2 = which(COBRE.data$Y.cobre == -1)
l2 = length(ind2)
mat_group2 = matrix(0, nrow = l2, ncol = l2)
r = 1
c = 1
for (i in ind2){
for (j in ind2){
mat_group1[r, c] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
c = c + 1
}
c = 1
r = r + 1
}
l2 = length(ind2)
mat_group2 = matrix(0, nrow = l2, ncol = l2)
r = 1
c = 1
for (i in ind2){
for (j in ind2){
mat_group2[r, c] = cor(COBRE.data$X.cobre[i, ], COBRE.data$X.cobre[j, ])
c = c + 1
}
c = 1
r = r + 1
}
wwtest(mat_group2)
heatmap(mat_group2)
wwtest(pval_mat)
pval_mat = pval_mat + t(pval_mat)
wwtest(pval_mat)
heatmap(pval_mat)
cur_network = (COBRE.data$X.cobre[i, ]-mean(COBRE.data$X.cobre[i, ]))/sd(COBRE.data$X.cobre[i, ]) - (COBRE.data$X.cobre[j, ]-mean(COBRE.data$X.cobre[j, ]))/sd(COBRE.data$X.cobre[j, ])
hist(cur_network)
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_p = wwtest(cur_mat)$p.value
pval_mat = matrix(0, nrow = 124, ncol = 124)
for (i in 1:124){
for (j in 1:124){
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = (COBRE.data$X.cobre[i, ]-mean(COBRE.data$X.cobre[i, ]))/sd(COBRE.data$X.cobre[i, ]) - (COBRE.data$X.cobre[j, ]-mean(COBRE.data$X.cobre[j, ]))/sd(COBRE.data$X.cobre[j, ])
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_p = wwtest(cur_mat)$p.value
pval_mat[i, j] = cur_p
}
}
#all the p values are around 0, so all the pairwise comparison are significant
heatmap(pval_mat)
summary(pval_mat)
wwtest(pval_mat)
pval_mat
pval_mat[lower.tri(pval_mat, diag = TRUE)] = 0
pval_mat = pval_mat + t(pval_mat)
wwtest(pval_mat)
ind1 = which(COBRE.data$Y.cobre == 1)
ind2 = which(COBRE.data$Y.cobre == -1)
l1 = length(ind1)
mat_group1 = matrix(0, nrow = l1, ncol = l1)
r = 1
c = 1
for (i in ind1){
for (j in ind1){
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = (COBRE.data$X.cobre[i, ]-mean(COBRE.data$X.cobre[i, ]))/sd(COBRE.data$X.cobre[i, ]) - (COBRE.data$X.cobre[j, ]-mean(COBRE.data$X.cobre[j, ]))/sd(COBRE.data$X.cobre[j, ])
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_p = wwtest(cur_mat)$p.value
mat_group1[r, c] = cur_p
c = c + 1
}
c = 1
r = r + 1
}
wwtest(mat_group1)
mat_group1[lower.tri(mat_group1, diag = TRUE)] = 0
mat_group1 = mat_group1 + t(mat_group1)
wwtest(mat_group1)
heatmap(mat_group1)
summary(mat_group1)
hist(pval_vec)
??wwtest
pval_vec = rep(0, 124)
stat_vec = rep(0, 124)
for (i in 1:124){
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = COBRE.data$X.cobre[i, ]
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_p = wwtest(cur_mat)$p.value
cur_stat = wwtest(cur_mat)$statistic
stat_vec[i] = cur_stat
pval_vec[i] = cur_p
}
summary(pval_vec)
hist(stat_vec)
summary(stat_vec)
hist(stat_vec)
t.test(stat_vec[ind1], stat_vec[ind2])
kstest(stat_vec[ind1], stat_vec[ind2])
ks.test(stat_vec[ind1], stat_vec[ind2])
eval_vec = rep(0, 124)
evec_vec = rep(0, 124)
for (i in 1:124){
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = COBRE.data$X.cobre[i, ]
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_eval = wwtest(cur_mat, 'eigenvalue')$statistic
cur_evec = wwtest(cur_mat, 'eigenvector')$statistic
eval_vec[i] = cur_eval
evec_vec[i] = cur_evec
}
ind1 = which(COBRE.data$Y.cobre == 1)
ind2 = which(COBRE.data$Y.cobre == -1)
color_vec = c(rep("blue", length(x)))
color_vec = c(rep("blue", 124))
color_vec[ind1] = 'red'
plot(eval_vec, evec_vec, col = color_vec, pch = 16, cex = 1.5)
??COBRE.data
plot(eval_vec, evec_vec, col = color_vec, pch = 16, cex = 1.5,
main = 'eigenvalue stat ~ eigenvector stat', xlab = 'eigenvalue stat', ylab = 'eigenvector stat')
legend("bottomright", legend = c("SZ", "HC"), col = c("red", "blue"), pch = 16)
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = COBRE.data$X.cobre[i, ]
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_eval = wwtest(cur_mat, 'eigenvalue')$statistic
cur_evec = wwtest(cur_mat, 'eigenvector')$statistic
cur_eval
cur_evec
data.matrix = cur_mat
# 2. Transform the upper triangular entries to ranks
upper_tri_values <- data_matrix[upper.tri(data_matrix, diag = FALSE)]
ranked_values <- rank(upper_tri_values)
data_matrix = cur_mat
# 2. Transform the upper triangular entries to ranks
upper_tri_values <- data_matrix[upper.tri(data_matrix, diag = FALSE)]
ranked_values <- rank(upper_tri_values)
transformed_matrix <- matrix(0, nrow = n, ncol = n)
transformed_matrix[upper.tri(data_matrix, diag = FALSE)] <- ranked_values/(N+1)
transformed_matrix = transformed_matrix + t(transformed_matrix)
first_eigenvalue <- eigen(transformed_matrix, only.values = TRUE)$values[1]
first_eigenvector <- eigen(transformed_matrix)$vectors[,1]
n = nrow(data_matrix)
N = n*(n-1)/2
transformed_matrix <- matrix(0, nrow = n, ncol = n)
transformed_matrix[upper.tri(data_matrix, diag = FALSE)] <- ranked_values/(N+1)
transformed_matrix = transformed_matrix + t(transformed_matrix)
first_eigenvalue <- eigen(transformed_matrix, only.values = TRUE)$values[1]
first_eigenvector <- eigen(transformed_matrix)$vectors[,1]
(first_eigenvalue - mu1)/(sqrt(tilde_sigma2))
# 4. Construct the test statistic
sigma2 = 1/12 - 1/(6*(N+1))
mu1 = 1/2*(n-1) + 2*sigma2
tilde_sigma2 = 8*sigma2^2/n
(first_eigenvalue - mu1)/(sqrt(tilde_sigma2))
n*(sum(first_eigenvector)/sqrt(n) - 1 + 1/(6*n))/(sqrt(tilde_sigma2))
first_eigenvector
sum(first_eigenvector)/sqrt(n)
sum(first_eigenvector)/sqrt(n) - 1 + 1/(6*n)
devtools::document()
devtools::check()
devtools::build()
install.packages('/Users/zhonglingliao/WilcoxonWignerTest_1.0.1.tar.gz')
library(WilcoxonWignerTest)
eval_vec = rep(0, 124)
evec_vec = rep(0, 124)
for (i in 1:124){
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = COBRE.data$X.cobre[i, ]
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
cur_eval = wwtest(cur_mat, 'eigenvalue')$statistic
cur_evec = wwtest(cur_mat, 'eigenvector')$statistic
eval_vec[i] = cur_eval
evec_vec[i] = cur_evec
}
ind1 = which(COBRE.data$Y.cobre == 1)
ind2 = which(COBRE.data$Y.cobre == -1)
color_vec = c(rep("blue", 124))
color_vec[ind1] = 'red'
plot(eval_vec, evec_vec, col = color_vec, pch = 16, cex = 1.5,
main = 'eigenvalue stat ~ eigenvector stat', xlab = 'eigenvalue stat', ylab = 'eigenvector stat')
legend("bottomright", legend = c("SZ", "HC"), col = c("red", "blue"), pch = 16)
hist(eval_vec - abs(evec_vec))
plot(eval_vec, evec_vec, col = color_vec, pch = 16, cex = 1.5,
main = 'eigenvalue stat ~ eigenvector stat', xlab = 'eigenvalue stat', ylab = 'eigenvector stat')
plot(eval_vec, evec_vec, col = color_vec, pch = 16, cex = 1.5,
main = 'eigenvalue stat ~ eigenvector stat', xlab = 'eigenvalue stat', ylab = 'eigenvector stat')
legend("bottomright", legend = c("SZ", "HC"), col = c("red", "blue"), pch = 16)
(first_eigenvalue - mu1)/(sqrt(tilde_sigma2))
n*(abs(sum(first_eigenvector)/sqrt(n)) - 1 + 1/(6*n))/(sqrt(tilde_sigma2))
n = 1000
m = matrix(rnorm(2,3,n*n), nrow = n)
m[lower.tri(m, diag = TRUE)] = 0
m = m + t(m)
n = 1000
m = matrix(rnorm(2,3,n*n), nrow = n, ncol = n)
m[lower.tri(m, diag = TRUE)] = 0
m = m + t(m)
wwtest(m)$statistic
wwtest(m,'eigenvector')$statistic
n = 1000
m = matrix(0, nrow = n, ncol = n)
m[lower.tri(m, diag = FALSE)] = rnorm(n*(n-1)/2, 2,3)
m = m + t(m)
wwtest(m)$statistic
wwtest(m,'eigenvector')$statistic
n = 2000
m = matrix(0, nrow = n, ncol = n)
m[lower.tri(m, diag = FALSE)] = rnorm(n*(n-1)/2, 2,3)
m = m + t(m)
wwtest(m)$statistic
wwtest(m,'eigenvector')$statistic
-0.581033 - 0.5888684
abs(-0.581033) - 0.5888684
0.6502397 - abs(-0.6409415)
n = 2000
m = matrix(0, nrow = n, ncol = n)
m[lower.tri(m, diag = FALSE)] = rnorm(n*(n-1)/2, 2,3)
m = m + t(m)
wwtest(m)$statistic
abs(wwtest(m,'eigenvector')$statistic)
plot(eval_vec, evec_vec, col = color_vec, pch = 16, cex = 1.5,
main = 'eigenvalue stat ~ eigenvector stat', xlab = 'eigenvalue stat', ylab = 'eigenvector stat')
abline(0, -1)
legend("bottomright", legend = c("SZ", "HC"), col = c("red", "blue"), pch = 16)
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = COBRE.data$X.cobre[1, ]
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
sigma_transit = seq(from = 0, to = 1, by = 0.05)
rate_transit = rep(0, length(sigma_transit))
rtimes = 50
j = 1
for (s in sigma_transit){
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
rate_transit[j] = mean(reject_res)
j = j + 1
}
plot(1:length(sigma_transit), rate_transit)
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
head(m_noise)
heatmap(m_noise)
wwtest(m_noise)
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
heatmap(m_noise)
m_noise = m_noise + t(m_noise)
heatmap(m_noise)
wwtest(m_noise)
m = cur_mat + m_noise
wwtest(m)
(wwtest(m)$p.value < 0.05)
heatmap(m)
sigma_transit = seq(from = 0, to = 2, by = 0.05)
rate_transit = rep(0, length(sigma_transit))
rtimes = 50
j = 1
for (s in sigma_transit){
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
rate_transit[j] = mean(reject_res)
j = j + 1
}
plot(1:length(sigma_transit), rate_transit)
summary(m)
plot(sigma_transit, rate_transit)
sigma_transit = seq(from = 0.5, to = 2.8, by = 0.05)
rate_transit = rep(0, length(sigma_transit))
rtimes = 100
j = 1
for (s in sigma_transit){
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
rate_transit[j] = mean(reject_res)
j = j + 1
}
plot(sigma_transit, rate_transit)
hist(m)
s = 1
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
hist(cur_mat)
m = cur_mat + m_noise
wwtest(m)
hist(m)
heatmap(m)
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
m = m_noise
#m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
mean(reject_res)
#m = m_noise
m = cur_mat + m_noise
wwtest(m)
heatmap(m)
heatmap(m_noise)
hist(cur_mat)
?rank
devtools::document()
devtools::check()
devtools::build()
install.packages('/Users/zhonglingliao/WilcoxonWignerTest_1.0.1.tar.gz')
library(WilcoxonWignerTest)
sd(cur_mat)
mean(cur_mat)
sigma_transit = seq(from = 0.5, to = 2.8, by = 0.02)
rate_transit = rep(0, length(sigma_transit))
rtimes = 200
j = 1
for (s in sigma_transit){
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
#m = m_noise
m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
rate_transit[j] = mean(reject_res)
j = j + 1
}
plot(sigma_transit, rate_transit)
hist(m)
cur_mat = matrix(rep(0, 263*263), nrow = 263)
cur_network = COBRE.data$X.cobre[1, ]
cur_mat[upper.tri(cur_mat)] = cur_network
cur_mat = cur_mat + t(cur_mat)
sigma_transit = seq(from = 0.5, to = 5.5, by = 0.1)
rate_transit = rep(0, length(sigma_transit))
rtimes = 300
j = 1
for (s in sigma_transit){
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
#m = m_noise
m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
rate_transit[j] = mean(reject_res)
j = j + 1
}
plot(sigma_transit, rate_transit)
plot(sigma_transit, rate_transit)
sigma_transit = seq(from = 0.5, to = 8.5, by = 0.1)
rate_transit = rep(0, length(sigma_transit))
rtimes = 300
j = 1
for (s in sigma_transit){
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
#m = m_noise
m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
rate_transit[j] = mean(reject_res)
j = j + 1
}
plot(sigma_transit, rate_transit)
plot(sigma_transit, rate_transit)
abline(0.05, 0)
sigma_transit = seq(from = 0, to = 10, by = 0.1)
rate_transit = rep(0, length(sigma_transit))
rtimes = 300
j = 1
for (s in sigma_transit){
reject_res = rep(0, rtimes)
for (i in 1:rtimes){
m_noise = matrix(0, nrow = 263, ncol = 263)
m_noise[upper.tri(m_noise)] = rnorm(263*262/2, 0, sqrt(s))
m_noise = m_noise + t(m_noise)
#m = m_noise
m = cur_mat + m_noise
reject_res[i] = (wwtest(m)$p.value < 0.05)
}
rate_transit[j] = mean(reject_res)
j = j + 1
}
plot(sigma_transit, rate_transit)
abline(0.05, 0)
